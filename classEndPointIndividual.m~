classdef classEndPointIndividual
    properties
        mID
        mGender % male -- 1
        mBirthDate % used to compute the patient age at some time point
        mDeathDate % used to compute the survival time

        mDoseTx
        mDoseBins_org
        mVolDiff
        mVolCum
        mBeta2Alpha
        mDoseBins_LQ
        mFxNum
        
        mLgn % log10(n)
        mLymanN % parameter n in Lyman model
        mEUD

        mStagePreTx % mStagePreTx before the treatment
        mBaselineDate % the date of the start point (in number)
        mCompDate % the date of complication occurance (in number)
        mCompGrade % patient complication grade
        mCompThreshold % threshold of severe complications
        mFlgCensor % flag for censor, 1 - censored
        mLastFollowupDate % the date of the last followup
        mRelapseDate % the date of relapse (in number)
        
    end
    
    methods % operations
        function EPIobj = classEndPointIndividual()
        end
        function EPIobj = set.mID(EPIobj,ptid)
            EPIobj.mID = num2str(ptid);
        end
        function EPIobj = set.mLgn(EPIobj,mLgn)
            EPIobj.mLgn = mLgn(:);
        end
        function EPIobj = set.mLymanN(EPIobj,n)
            EPIobj.mLymanN = n(:);
        end
        function EPIobj = set.mDoseBins_org(EPIobj,dosebins)
            if any(isnan(dosebins))
                error('there is nan element when atempting to assigning member mDoseBins_org, in classComplicationIndividual');
            end
            EPIobj.mDoseBins_org = dosebins(:);
%             if ~(isempty(EPIobj.mVolDiff) && isempty(EPIobj.mVolCum))
%                 if length(EPIobj.mVolDiff)~=length(EPIobj.mDoseBins_org) && length(EPIobj.mVolCum)~=length(EPIobj.mDoseBins_org)
%                     warning('the (to be assigned) mDoseBins_org has different number of elements from both mVolDiff and mVolCum, in classComplicationIndividual');
%                 end
%             end
        end
        function EPIobj = set.mVolDiff(EPIobj,mVolDiff)
            if any(isnan(mVolDiff))
                error('there is nan element when atempting to assigning member mVolDiff, in classComplicationIndividual');
            end
            EPIobj.mVolDiff = mVolDiff(:);
            if mVolDiff(end) ~= 0 % the last bin should be with zero volume
                EPIobj.mVolDiff(end+1) = 0;
            end
            if length(EPIobj.mVolDiff)~=length(EPIobj.mDoseBins_org)
                d = length(EPIobj.mDoseBins_org) - length(EPIobj.mVolDiff);
                if d>0
                    EPIobj.mVolDiff(end+1:end+d) =0;
                    warning('mDoseBins_org has more number of elements than the (to be assigned) mVolDiff, in classComplicationIndividual. mVolDiff is complemented by zeros');
                else
                    warning('mDoseBins_org has less number of elements than the (to be assigned) mVolDiff, in classComplicationIndividual, which is complemented by expolation');
                    if length(EPIobj.mDoseBins_org)<2
                        dstep = 1;
                    else
                        dstep = EPIobj.mDoseBins_org(end)-EPIobj.mDoseBins_org(end-1);
                    end
                    EPIobj.mDoseBins_org(end:end-d) = EPIobj.mDoseBins_org(end):dstep:(EPIobj.mDoseBins_org(end)-d*dstep);
                end
            end
        end
        function EPIobj = set.mVolCum(EPIobj,mVolCum)
            if any(isnan(mVolCum))
                error('there is nan element when atempting to assigning member mVolCum, in classComplicationIndividual');
            end
            EPIobj.mVolCum = mVolCum(:);
            if mVolCum(end) ~= 0 % the last bin should be with zero volume
                EPIobj.mVolCum(end+1) = 0;
            end
            if length(EPIobj.mVolCum)~=length(EPIobj.mDoseBins_org)
                d = length(EPIobj.mDoseBins_org) - length(EPIobj.mVolCum);
                if d>0
                    warning('mDoseBins_org has more number of elements than the (to be assigned) mVolCum, in classComplicationIndividual, mVolCum is complemented by zeros');
                    EPIobj.mVolCum(end+1:end+d) =0;
                else
                    warning('mDoseBins_org has less number of elements than the (to be assigned) mVolCum, in classComplicationIndividual, which is complemented by expolation');
                    if length(EPIobj.mDoseBins_org)<2
                        dstep = 1;
                    else
                        dstep = EPIobj.mDoseBins_org(end)-EPIobj.mDoseBins_org(end-1);
                    end
                    EPIobj.mDoseBins_org(end:end-d) = EPIobj.mDoseBins_org(end):dstep:(EPIobj.mDoseBins_org(end)-d*dstep);
                end
            end
        end
        
        function EPIobj = LinearQuartraticCorrection(EPIobj)
            if isempty(EPIobj.mBeta2Alpha)
                error('ratio of Beta to Alpha is not determined');
            end
            if EPIobj.mBeta2Alpha > 0
                EPIobj.mDoseBins_LQ = EPIobj.mDoseBins_org .* ( 1 + EPIobj.mBeta2Alpha / EPIobj.mFxNum * EPIobj.mDoseBins_org );
            else
                EPIobj.mDoseBins_LQ = EPIobj.mDoseBins_org;
            end
        end
        function EPIobj = Cum2Diff(EPIobj) % compute differential DVH from cumulative DVH
            EPIobj.mVolDiff=zeros(size(EPIobj.mVolCum));
            EPIobj.mVolDiff(1:end-1) = diff( EPIobj.mVolCum);
            if any(EPIobj.mVolDiff(:)>0) % check if it is a monotonic decreasing cumulative mVolCum
                error('The cumulative mVolCum is not monotonic decreasing');
            end
            EPIobj.mVolDiff = abs( EPIobj.mVolDiff);
        end
        function EPIobj = Diff2Cum(EPIobj)
            EPIobj.mVolCum = flipud( EPIobj.mVolDiff );
            EPIobj.mVolCum = cumsum( EPIobj.mVolCum );
            EPIobj.mVolCum = flipud( EPIobj.mVolCum );
        end
        function interpDose = DoseAtVol(EPIobj,vol)
            if vol < 0
                error('Dose to be interpolated is at negative volume');
            end
            
            f = find( EPIobj.mVolCum >= vol );
            if isempty(f)
                interpDose = 0;
            else
                f = f(end);
                if EPIobj.mVolCum(f) == vol
                    f = find( EPIobj.mVolCum == vol );
                    interpDose = EPIobj.mDoseBins_LQ(f(1));
                else
                    interpDose = interp1( [EPIobj.mVolCum(f); EPIobj.mVolCum(f+1)], [EPIobj.mDoseBins_LQ(f); EPIobj.mDoseBins_LQ(f+1)], vol );
                end
            end
        end
        function interpVol = VolAtDose(EPIobj,dose)
            if dose < 0
                error('Volume to be interpolated is at negative dose');
            end
            
            f = find( EPIobj.mDoseBins_LQ <= dose ); f=f(end); % f won't be empty by definition
            if EPIobj.mDoseBins_LQ(f) < EPIobj.mDoseBins_LQ(end) % not the last element, interpolate to get the best estimation of volume, for the last element, it is zero
                interpVol = interp1( [EPIobj.mDoseBins_LQ(f); EPIobj.mDoseBins_LQ(f+1)], [EPIobj.mVolCum(f); EPIobj.mVolCum(f+1)], dose );
            else
                interpVol = 0;
            end
        end
        function EPIobj = lgn2n(EPIobj)
            EPIobj.mLymanN = 10.^EPIobj.mLgn;
        end
        function EPIobj = CalculateEUD(EPIobj)
            % prepare differential DVHs
            if isempty(EPIobj.mVolDiff) % no differential data
                EPIobj = EPIobj.Cum2Diff();
            end
            % prepare LQ corrected doses
            if isempty(EPIobj.mDoseBins_LQ) % not corrected yet
                EPIobj = EPIobj.LinearQuartraticCorrection();
            end
            % normalize differential volume
            vol = EPIobj.mVolDiff;
            v = sum(vol);
            if v~=1
                vol = vol/v;
            end
            % shift the dose from left end of bin to the center
            dosebins = ( EPIobj.mDoseBins_LQ(1:end-1) + EPIobj.mDoseBins_LQ(2:end) )/2;
            % compute EUD
            [nn,dosebins] = ndgrid( EPIobj.mLymanN, dosebins );
            [~,vol] = ndgrid( EPIobj.mLymanN, vol(1:end-1) );
            dosebins = dosebins .^ (1./nn); % (di)^(1/n)
            dosebins = dosebins .* vol; % (di)^(1/n) * vi
            EPIobj.mEUD = (sum( dosebins, 2 )).^CIboj.mLymanN;
        end
    end
    
    methods % plots
        function DiffDVHCurve_fig(EPIobj,lw)
            if ~exist('ln','var')
                lw = 1;
            end
            plot(EPIobj.mDoseBins_org, EPIobj.mVolDiff,'LineWidth',lw);
            set(gca,'xminortick','on','yminortick','on');
            set(gca,'box','on');
            xlabel('Dose'); ylabel('Volume Fraction');
        end
        function CumDVHCurve_fig(EPIobj,lw)
            if ~exist('ln','var')
                lw = 1;
            end
            plot(EPIobj.mDoseBins_org, EPIobj.mVolCum,'LineWidth',lw);
            set(gca,'xminortick','on','yminortick','on');
            set(gca,'box','on');
            xlabel('Dose'); ylabel('Volume');
        end
        function EUDCurve_n_fig(EPIobj,lw)
            if ~exist('ln','var')
                lw = 1;
            end
            plot(EPIobj.mEUD, EPIobj.mLgn,'o-','LineWidth',lw);
            set(gca,'xminortick','on','yminortick','on');
            set(gca,'box','on');
            xlabel('EUD'); ylabel('log_1_0(n)');
        end
        function EUDCurve_a_fig(EPIobj,strMarker,lw)
            if ~exist('strMarker','var')
                strMarker = 'b';
            end
            if ~exist('ln','var')
                lw = 1;
            end
            
            a1 = gca;
            a2 = copyobj(a1,gcf);
            set(a2,'Color','none');
            set(a2,'Xtick',[]);
            
            plot(a1, EPIobj.mEUD, EPIobj.mLgn,strMarker,'LineWidth',lw);
            set(a2,'YAxisLocation','right');
            set(a2,'YTickLabel',num2str(EPIobj.mLgn(1:2:end)));
            
            set(a1,'YTickLabel',num2str(EPIobj.mLgn(end:-2:1)));
            set(a1,'xminortick','on','yminortick','on');
            set(a1,'box','on');
            xlabel(a1,'mEUD');
            ylabel(a1,'log_1_0(a)');
%             ylabel(a2,'log_1_0(n)');
        end
    end
end